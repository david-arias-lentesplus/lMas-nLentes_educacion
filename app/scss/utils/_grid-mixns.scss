
/* CONTAINER */
@mixin make_container (){     
    width: 100%;
    padding-right: ( calc($grid_w_Gutter / 2) );
    padding-left: ( calc($grid_w_Gutter / 2) );
    margin-right: auto;
    margin-left: auto;
    
    @include mediaQ_minMax_width ( nth(nth($grid_breaks, 1 ),2), nth(nth($grid_breaks, 2),2)  ) {
        padding-right: 0;
        padding-left: 0;
    }
}
@mixin make_container_MaxWidth ( $maxW: $container_maxWs, $breakpnts: $grid_breaks ){
    @each $break, $cont_max_width in $maxW {
        $max : map-get($breakpnts, $break );
        @include mediaQ_min_width ( $max ) {
            max-width: $cont_max_width;
        }
    }
}

/* CONTAINER FLUID */
@mixin make_container_fluid() {
   width: 100% ;
   padding-right: 0;
   padding-left: 0;
   margin-right: auto;
   margin-left: auto;
}

/* MAKE ROW */
@mixin create_row() {
    display: flex;
    flex-wrap: wrap;
    flex-direction: row;
    margin-top:  calc($grid_w_Gutter / 2) ;
    margin-bottom:  calc($grid_w_Gutter / 2) ;
};
@mixin make_row() {
    @include create_row();

    margin-right: (calc($grid_w_Gutter / -2));
    margin-left: (calc($grid_w_Gutter / -2));
    
    @include mediaQ_minMax_width ( nth(nth($grid_breaks, 1 ),2), nth(nth($grid_breaks, 2),2)  ) {
       margin-right: 0;
       margin-left: 0;
   }
};
@mixin make_row_fluid() {
    @include create_row();

    padding-right: ( calc($grid_w_Gutter / 2) );
    padding-left: ( calc($grid_w_Gutter / 2) );
    

    @include mediaQ_minMax_width ( nth(nth($grid_breaks, 1 ),2), nth(nth($grid_breaks, 2),2)  ) {
       padding-right: 0;
       padding-left: 0;
   }
};

/* MAKE COLS */
@mixin make-col($size, $columns: $grid-cols) {
   flex: 0 0 percentage(calc($size / $columns));
   max-width: percentage(calc($size / $columns));
}

@mixin make-col-offset( $size, $columns: $grid-cols ) {
   $num: calc($size / $columns);
   margin-left: if($num == 0, 0, percentage($num));
}

@mixin make_grid_cols( $gutter:$grid_w_Gutter, $breakpoints: $grid_breaks ){
    %grid-column {
         position: relative;
       width: 100%;
       min-height: 1px;

       box-sizing: border-box;

       padding-right: (calc($gutter / 2));
       padding-left: (calc($gutter / 2));

       @include mediaQ_minMax_width ( nth(nth($grid_breaks, 1 ),2), nth(nth($grid_breaks, 2),2)  ) {
           padding-right: (calc($gutter / 6));
           padding-left: (calc($gutter / 6));
       }
    }

    @each $breakName, $breakSize in $breakpoints {
       $infix: breakpoint-infix($breakName, $breakpoints);

       @for $i from 1 through $grid-cols {
           .col#{$infix}_#{$i} {
               @extend %grid-column;
           }
         }

         $max : map-get($breakpoints, $breakName );
       @include mediaQ_min_width ( $max ) {

           @for $i from 1 through $grid-cols {
               .col#{$infix}_#{$i} {
                   @include make-col($i, $grid-cols);
               }
                }

           @for $i from 0 through ($grid-cols - 1) {
               .offset#{$infix}_#{$i} {
                   @include make-col-offset($i, $grid-cols);
               }
              }
                  
       }
    }
}